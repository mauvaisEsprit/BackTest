const Booking2 = require("../models/booking2");
const { v4: uuidv4 } = require('uuid');
const sendHourlyBookingConfirmationEmail  = require("../utils/hourlyConfirmation");
const { sendHourlyBookingReceptionEmail } = require("../utils/hourlyReception");

// ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
exports.createHourlyBooking = async (req, res) => {
  try {
    const locale = req.body.locale || 'ru';
    const bookingNumber = uuidv4();
    const booking = new Booking2({ ...req.body, bookingNumber, locale });
    await booking.save();

    await sendHourlyBookingReceptionEmail(booking);
    res.status(201).json({ success: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã" });
  }
};

// üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
exports.getHourlyBookings = async (req, res) => {
  try {
    const bookings = await Booking2.find().sort({ createdAt: -1 });
    res.json(bookings);
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω–¥—ã" });
  }
};

// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
exports.confirmHourlyBooking = async (req, res) => {
  try {
    const { id } = req.params;
    const booking = await Booking2.findByIdAndUpdate(id, { confirmed: true }, { new: true });

    if (!booking) return res.status(404).json({ error: "–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

    await sendHourlyBookingConfirmationEmail(booking);

    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã" });
  }
};

exports.deleteHourlyBooking = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await Booking2.findByIdAndDelete(id);

    if (!deleted) return res.status(404).json({ error: "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" });
  }
};
