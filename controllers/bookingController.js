const Booking1 = require("../models/booking1");
const { v4: uuidv4 } = require('uuid');
const { sendBookingReceivedEmail } = require("../utils/bookingReception");
const { sendConfirmationMail } = require("../utils/bookingConfirmation");
const i18next = require("../config/i18n");
const Prices = require("../models/prices");
const calculatePrice = require("../utils/calculatePrice");
const axios = require("axios");

// ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
exports.createBooking = async (req, res) => {
  try {
    const locale = req.body.locale || 'ru'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const bookingNumber = uuidv4();
     

    const { from, to, price, isRoundTrip } = req.body;

    if (!from || !to) {
      return res.status(400).json({ error: "–ê–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

      // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    const [fromRes, toRes] = await Promise.all([
      axios.get("https://nominatim.openstreetmap.org/search", {
        params: { q: from, format: "json", limit: 1 },
      }),
      axios.get("https://nominatim.openstreetmap.org/search", {
        params: { q: to, format: "json", limit: 1 },
      }),
    ]);

    const fromCoords = fromRes.data[0];
    const toCoords = toRes.data[0];

    if (!fromCoords || !toCoords) {
      return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É" });
    }

    


    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    const osrmUrl = `http://router.project-osrm.org/route/v1/driving/${fromCoords.lon},${fromCoords.lat};${toCoords.lon},${toCoords.lat}?overview=false`;

    const osrmRes = await axios.get(osrmUrl);
    const route = osrmRes.data.routes[0];

    const distanceKm = route.distance / 1000;
    const durationMin = route.duration / 60;

    

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const prices = await Prices.findOne();
    const fare = calculatePrice(distanceKm, prices , isRoundTrip);
    
    console.log("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞:", fare);


  const booking = new Booking1({
      ...req.body,
      bookingNumber,
      locale, 
      priceServer: fare, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Ü–µ–Ω—É
    });

    await booking.save();

    

    await sendBookingReceivedEmail(booking);

    res.status(201).json({ success: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" });
  }
};

// üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
exports.getBookings = async (req, res) => {
  try {
    const bookings = await Booking1.find().sort({ createdAt: -1 });
    
    res.json(bookings);
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π" });
  }
};

// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
exports.confirmBooking = async (req, res) => {
  try {
    const { id } = req.params;
    const booking = await Booking1.findByIdAndUpdate(id, { confirmed: true }, { new: true });

    if (!booking) return res.status(404).json({ error: "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

    
    await sendConfirmationMail(booking);

    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" });
  }
};

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
exports.deleteBooking = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await Booking1.findByIdAndDelete(id);

    if (!deleted) return res.status(404).json({ error: "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" });
  }
};

